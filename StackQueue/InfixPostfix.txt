/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Modul3;

/**
 *
 * @author FikriSaa
 */
import java.util.Scanner;
import javax.swing.JOptionPane;

public class InfixPostfix {
    private Stack stack;
    private String input;
    private String output = "";

    public InfixPostfix(String in) {
        input = in;
        int stackSize = input.length();
        stack = new Stack(stackSize);
  }

    public String doTrans() {
    for (int j = 0; j < input.length(); j++) {
        char ch = input.charAt(j);
        switch (ch) {
        case '+':
        case '-':
            gotOper(ch, 1); 
            break;          
        case '*': 
        case '/':
            gotOper(ch, 2); 
            break;          
        case '^':
            gotOper(ch, 3);
            break;          
        case '(': 
            stack.push(ch); 
            break;         
        case ')':
            gotParen(ch);  
        break;
        default: 
            output = output + ch; 
        break;
        }
    }
    
    while (!stack.isEmpty()) {
        output = output + stack.pop(); 
    }
    return output; 
}

    public void gotOper(char opThis, int prec1) { 
        while (!stack.isEmpty()) {
            char opTop = stack.pop();
                if (opTop == '(') {
                stack.push(opTop);
                break;
            }
                else { 
                int prec2;
                    
                    if (opTop == '+' || opTop == '-'){
                        prec2 = 1;    
                    }
                    
                    else if (opTop == '*' || opTop == '/'){
                        prec2 = 2;    
                    }
                    
                    else {
                        prec2 = 3; 
                    }
                    
                    if (prec2 < prec1){ 
                        stack.push(opTop); 
                        break;
                    } 
                    
                    else { // jika tidak lebih kecil
                        output = output + opTop; 
                    }
                }
        }
        stack.push(opThis);
  }

    public void gotParen(char ch){ 
        while (!stack.isEmpty()) {
        char chx = stack.pop();
            if (chx == '('){ 
                break;
            }
            else {
            output = output + chx;
            }
        }
    }

    public static void main(String[] args){
    String input = JOptionPane.showInputDialog(null, "Masukkan Notasi Infix : "); 
        if (input.equals("")){ 
            JOptionPane.showMessageDialog(null, "Silahkan Inputkan Kembali Notasi Infix !"); 
            System.exit(0);
            }
        
        else {
            String output;
            InfPost theTrans = new InfPost(input); 
            output = theTrans.doTrans();  
            JOptionPane.showMessageDialog(null,"Notasi Infix      : "+input+"\n"+"Notasi Postfix : "+output);
            System.exit(0);
        }
    }
    
    class Stack {
        private int maxSize;
        private char[] stackArray;
        private int top;
        public Stack(int max) {
            maxSize = max;
            stackArray = new char[maxSize];
            top = 0;
        }

        public void push(char j) {
            stackArray[++top] = j;  
        }

        public char pop() {
            return stackArray[top--]; 
        }

        public boolean isEmpty() {
          return (top == 0);
        }
    }
}
